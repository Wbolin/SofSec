MODULE trafficLight(signal)
VAR
	--state : {green, yellow, red};
	red : boolean;
	yellow : boolean;
	green : boolean;

ASSIGN
	init(red) := TRUE;
	next(red) := case
		red & yellow : FALSE;
		signal & red : TRUE;
		yellow : TRUE;
		TRUE : red;
	esac;

	init(yellow) := FALSE;
	next(yellow) := case
		red & yellow : FALSE;
		signal & red : TRUE;
		yellow : FALSE;
		!signal & green : TRUE;
		TRUE : yellow;
	esac;

	init(green) := FALSE;
	next(green) := case
		red & yellow : TRUE;
		!signal & green : FALSE;
		TRUE : green;
	esac;

DEFINE
	red_and_yellow := red & yellow;

MODULE main
VAR
	signal : array 0..1 of boolean;
	sensor : array 0..1 of boolean;
	timer : 0..max_green_time;

	light1 : trafficLight(signal[0]);
	light2 : trafficLight(signal[1]);

ASSIGN
	init (timer) := max_green_time;
	next (timer) := case
		(light1.green | light2.green )& timer > 0 : timer - 1;
		!light1.green & !light2.green : max_green_time;
		TRUE : timer;
	esac;

	init (signal[0]) := FALSE;
	next (signal[0]) := case
		light1.green & timer = 0 : FALSE;
		light2.green & timer = 0 & light1.red: TRUE ;
		TRUE: FALSE;
	esac;


	init (signal[1]) := FALSE;
	next (signal[1]) := case
		
		light2.green & timer = 0: FALSE;
		light1.green & timer = 0 & light2.red: TRUE;
		TRUE : FALSE;
	esac;

DEFINE
	max_green_time := 3;


LTLSPEC
	G(!(light1.green & light1.red) & !(light1.green & light1.yellow));

LTLSPEC
	G(light1.red & !light1.yellow -> X(light1.red & light1.yellow) | X(light1.red));

LTLSPEC
	G(light1.red & light1.yellow -> X(light1.green));

CTLSPEC
	AG(light1.green -> EF (light1.yellow));

LTLSPEC
	G(light1.green & !signal[0] -> X(light1.yellow));

LTLSPEC
	G(light1.yellow & !light1.red -> X(light1.red & !light1.yellow));







