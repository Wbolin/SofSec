

MODULE main
VAR
  choice:  boolean;
  payment: boolean;
  acc_payment: boolean;
  state:   { ready, expect_payment, dispense_item };
  n_items: 0..max_items;
  y : 0..max_items;
ASSIGN

  init (state) := ready;
  next (state) := case
		    state = ready          & choice:  expect_payment;
		    state = expect_payment & acc_payment: dispense_item;
		    state = expect_payment & !choice: ready;
		    state = dispense_item:	      ready;
		    TRUE:                             state;
  esac;

  init (n_items) := max_items;
  next(n_items) := case
        state = dispense_item & n_items > 0: n_items - 1;
        TRUE: n_items;
  esac;
  init(y):= max_items;
  next(y):= n_items;
  init (acc_payment) := FALSE;
  next (acc_payment) := (state = expect_payment & payment & choice & n_items > 0); --added "& choice"

DEFINE
  release_item := (state = dispense_item);
  max_items := 5;

LTLSPEC
  G(acc_payment -> F release_item);

LTLSPEC
  G(n_items >= 0);

LTLSPEC
  G(!(acc_payment&n_items=0));

LTLSPEC
  G(state=dispense_item -> X(n_items = y - 1));
--Trace Description: LTL Counterexample 
--Trace Type: Counterexample 
--  -> State: 1.1 <-		
--    choice = FALSE
--    payment = FALSE
--    acc_payment = FALSE
--    state = ready
--    release_item = FALSE
--  -> State: 1.2 <-
--    choice = TRUE
--  -> State: 1.3 <-
--    choice = FALSE
--    payment = TRUE
--    state = expect_payment		*It should go back to state = ready if !choice
--  -> State: 1.4 <-
--    payment = FALSE
--    acc_payment = TRUE
--    state = ready
--  -- Loop starts here
--  -> State: 1.5 <-
--    acc_payment = FALSE
--  -> State: 1.6 <-
