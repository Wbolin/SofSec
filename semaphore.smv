MODULE user(semaphore, active)
VAR
  state : { idle, entering, critical, exiting };
ASSIGN
  init(state) := idle;
  next(state) := case
    state = idle & active : { idle, entering };
    state = entering & !semaphore & active: critical;
    state = critical & active: { critical, exiting };
    state = exiting & active: idle;
    TRUE : state;
  esac;

  --  is entered infinitely often
  FAIRNESS
    state = entering

  -- is exited infinitely often
  FAIRNESS
    state = exiting

MODULE main
VAR
  -- Instead of using "process", we keep track of which process (proc1 or proc2) that we
  -- currently want running.
  semaphore : boolean;
  pid : 0..1;
  proc1 : user(semaphore, next(pid) = 0);
  proc2 : user(semaphore, next(pid) = 1);
ASSIGN
  init(semaphore) := FALSE;

  -- If semaphore is false, the active process can go critical, and semaphore is set to true.
  -- If the active process exits critical, semaphore is set to false.
  next(semaphore) := case
    proc1.state = entering & next(pid) = 0 & !semaphore: TRUE;
    proc2.state = entering & next(pid) = 1 & !semaphore: TRUE;
    proc1.state = exiting & pid = 0 & semaphore: FALSE;
    proc2.state = exiting & pid = 1 & semaphore: FALSE;
    TRUE : semaphore;
  esac;

SPEC AG !(proc1.state = critical & proc2.state = critical); -- safety, the processes are never critical at the same time

SPEC AG (proc1.state = entering -> AF proc1.state = critical); -- liveness, no livelock


-------------WITHOUT THE FAIRNESS CONDITIONS-------------------------------------
---- specification AG !(proc1.state = critical & proc2.state = critical)  is true
---- specification AG (proc1.state = entering -> AF proc1.state = critical)  is false
---- as demonstrated by the following execution sequence
--Trace Description: CTL Counterexample 
--Trace Type: Counterexample 
---> State: 1.1 <-
--  semaphore = FALSE
--  pid = 0
--  proc1.state = idle
--  proc2.state = idle
---> State: 1.2 <-
--  proc1.state = entering   * proc1 entered, but never critical because only proc2 is active past that
---> State: 1.3 <-
--  pid = 1
--  proc2.state = entering
---- Loop starts here
---> State: 1.4 <-
--  semaphore = TRUE
--  proc2.state = critical
---> State: 1.5 <-
--  proc2.state = exiting
---> State: 1.6 <-
--  semaphore = FALSE
--  proc2.state = idle
---> State: 1.7 <-
--  proc2.state = entering
---> State: 1.8 <-
--  semaphore = TRUE
--  proc2.state = critical



