MODULE main
VAR
  location : array 0..3 of boolean;
  traveling: array 0..3 of boolean;
  torch: boolean;
  time: 0..100;

ASSIGN
  init (location[0]) := FALSE;
  init (location[1]) := FALSE;
  init (location[2]) := FALSE;
  init (location[3]) := FALSE;
  init (torch) := FALSE;
  init (time) := 0;

  next (torch) := case
    -- rule: torch can only move if carried
    -- torch will end up at where it is carried
    torch=location[0] & traveling[0]: next(location[0]);
    torch=location[1] & traveling[1]: next(location[1]);
    torch=location[2] & traveling[2]: next(location[2]);
    torch=location[3] & traveling[3]: next(location[3]);
    TRUE: torch;
  esac;

  -- The location of a person can only change if it access to the torch, it wants to travel
  -- and there are a maximum of 2 concurrent travelers.
  next (location[0]) := case
    torch = location[0] & traveling[0] & count(traveling[0], traveling[1], traveling[2], traveling[3]) < 3: !location[0];
    TRUE: location[0];
  esac;

  next (location[1]) := case
    torch = location[1] & traveling[1] & count(traveling[0], traveling[1], traveling[2], traveling[3]) < 3: !location[1];
    TRUE: location[1];
  esac;

  next (location[2]) := case
    torch = location[2] & traveling[2] & count(traveling[0], traveling[1], traveling[2], traveling[3]) < 3: !location[2];
    TRUE: location[2];
  esac;

  next (location[3]) := case
    torch = location[3] & traveling[3] & count(traveling[0], traveling[1], traveling[2], traveling[3]) < 3: !location[3];
    TRUE: location[3];
  esac;

  -- Once traveling, add the slowest persons time to the timer.
  next(time) := case
    time > 90: 90;
    traveling[3] & location[3] != next(location[3]): time + 10;
    traveling[2] & location[2] != next(location[2]): time + 5;
    traveling[1] & location[1] != next(location[1]): time + 2;
    traveling[0] & location[0] != next(location[0]): time + 1;
    TRUE: time;
  esac;

LTLSPEC
  !(( (traveling[0]|traveling[1]|traveling[2]|traveling[3])) -- someone is always travelling --
     U (location[0] & location[1] & location[2] & location[3]    -- all travelers must reach goal --
       & time <= 17)); -- in 17 seconds or less --



-- specification !((((traveling[0] | traveling[1]) | traveling[2]) | traveling[3]) U ((((location[0] & location[1]) & location[2]) & location[3]) & time <= 17))  is false
-- as demonstrated by the following execution sequence
--Trace Description: LTL Counterexample 
--Trace Type: Counterexample 
---> State: 1.1 <-
--  location[0] = FALSE
--  location[1] = FALSE
--  location[2] = FALSE
--  location[3] = FALSE
--  traveling[0] = TRUE
--  traveling[1] = TRUE
--  traveling[2] = FALSE
--  traveling[3] = FALSE
--  torch = FALSE
--  time = 0
---> State: 1.2 <-
--  location[0] = TRUE
--  location[1] = TRUE
--  traveling[0] = FALSE
--  traveling[2] = TRUE
--  torch = TRUE
--  time = 2
---> State: 1.3 <-
--  location[1] = FALSE
--  traveling[1] = FALSE
--  traveling[3] = TRUE
--  torch = FALSE
--  time = 4
---> State: 1.4 <-
--  location[2] = TRUE
--  location[3] = TRUE
--  traveling[0] = TRUE
--  traveling[2] = FALSE
--  traveling[3] = FALSE
--  torch = TRUE
--  time = 14
---> State: 1.5 <-
--  location[0] = FALSE
--  traveling[1] = TRUE
--  torch = FALSE
--  time = 15
---- Loop starts here
---> State: 1.6 <-
--  location[0] = TRUE
--  location[1] = TRUE
--  traveling[2] = TRUE
--  torch = TRUE
--  time = 17          --- IT WAS POSSIBLE IN 17 TIME UNITS!
---- Loop starts here
---> State: 1.7 <-
---> State: 1.8 <-

